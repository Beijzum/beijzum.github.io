{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome. This document will help you create a simple Python game on a Windows operating system. It will also help you upload your Python project to GitHub. The goal is to help first-term British Columbia Institute of Technology (BCIT) Computer Systems Technology (CST) students get started on their coding journey. This guide will help you become more comfortable with writing code and using developer platforms.</p> <p> Python is a high-level programming language, which means it is easy to read and understand for humans.</p> <p> GitHub is a developer platform that allows developers to create, store, manage, and share their code.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This guide is targeted towards first-term BCIT CST students with little experience in writing code and using developer platforms.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>You must have the following before proceeding:</p> <ul> <li> Python v3.x.x+</li> <li> GitHub account</li> <li> A personal computer or laptop with a Windows operating system</li> <li> Basic computer navigation knowledge</li> <li> Basic command terminal knowledge</li> <li> Google Chrome,  Edge, or  Firefox web browsers with the latest updates</li> </ul>"},{"location":"#procedures-overview","title":"Procedures Overview","text":"<p>The main sections of this document should be read in the order below:</p> <ol> <li> Setting Up Your Project</li> <li> Writing Your First Game</li> <li> Uploading to GitHub</li> </ol> <p>You may navigate through this document using the table of contents on the left side of this document. It may also appear as a hamburger menu in the top left.</p> <p>You may also navigate by clicking the next and previous section arrows at the bottom (footer) of this document.</p>"},{"location":"#typographical-conventions","title":"Typographical Conventions","text":"<p>This document uses the following style for presenting information:</p> <ul> <li> <p>When clicking is mentioned, it means left-clicking on your mouse.</p> </li> <li> <p>Typing in commands in regards to the terminal will look like the following:</p> <pre><code>Type these words\n</code></pre> <p>a. You must press the \"enter\" or \"return\" key on your keyboard after typing the command to activate the command.</p> </li> <li> <p>Python code snippets will look like the following:</p> <pre><code>print(\"Hello World!\")\n</code></pre> <p>a. You must write Python code in the notepad application.</p> <p>b. You must press the \"enter\" or \"return\" key after typing in the code found in the code snippet. This creates a new line and prepares you for the next line of code. For example, if you were instructed to type the previously shown code snippet three times, then it should look like the following:</p> <pre><code>print(\"Hello World!\")\nprint(\"Hello World!\")\nprint(\"Hello World!\")\n</code></pre> </li> <li> <p>Directory and file names will look like the following:</p> <p>a. Directory names will look like <code>directory_name</code>.</p> <p>b. File names will look like <code>filename.extension</code> with the period designating the file's extension.</p> </li> <li> <p>Terminal commands and Python keywords mentioned outside of code blocks will look like the following:</p> <p>a. Python keywords like \"print()\" will look like <code>print()</code>. Variable names like \"user_input\" will look like <code>user_input</code>.</p> <p>b. Terminal commands like \"git init\" will look like <code>git init</code>.</p> </li> </ul>"},{"location":"#notes-and-warning-messages","title":"Notes and Warning Messages","text":"<p>This document uses the following message block styles for presenting information:</p> <p>Note</p> <p>Explains additional details.</p> <p>Warning</p> <p>Explains steps that must be taken before proceeding. Follow the warnings to prevent errors from occuring.</p> <p>Success</p> <p>Explains what a successful task will look like. No issue to resolve and reader may continue with the document.</p> <p>Failure</p> <p>Explains what actions or errors may crash the program. The issue must be resolved before continuing with the document.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Once you have read all the information on this page, please proceed to Setting Up Your Project.</p>"},{"location":"Setting%20Up%20Your%20Project/","title":"Setting Up Your Project","text":""},{"location":"Setting%20Up%20Your%20Project/#overview","title":"Overview","text":"<p>This section will focus on setting up a local projects folder using the  terminal.</p> <p>Note</p> <p>The terms \"command prompt\" and \"terminal\" are interchangable. Windows calls it the \"command prompt\", whereas developers often use the word \"terminal\". This document will describe the application as the \"terminal\" in this tutorial in preparation for your computer science degree.</p> <p>Warning</p> <p>You must be on a Windows operating system to follow this guide without any errors. If you are on a Mac or Linux operating system, then the following steps may not work for you.</p> <p>Please read the typographical conventions here before continuing. Remember to press the \"enter/return\" key after typing in the terminal commands.</p>"},{"location":"Setting%20Up%20Your%20Project/#opening-the-terminal","title":"Opening the Terminal","text":"<p>This section will focus on how to open the  terminal on a computer with a Windows operating system.</p> <ol> <li> <p>Click on the  Windows icon on the bottom left of your screen to access the \"Start menu\".     </p> <p>Note</p> <p>You can also press the \"Windows\" key often found at the bottom left of your keyboard.</p> <p></p> </li> <li> <p>Type <code>command</code> or <code>cmd</code> into the search bar and click on the \"Command Prompt\" application shown below to open it:</p> <pre><code>command\n</code></pre> <p>or</p> <pre><code>cmd\n</code></pre> <p></p> <p>Note</p> <p>If there is no search bar, you may also type <code>cmd</code> right after accessing the Start menu.</p> <p>Success</p> <p>This window will pop up if you successfully opened the terminal.</p> <p></p> </li> </ol>"},{"location":"Setting%20Up%20Your%20Project/#checking-for-python-on-computer","title":"Checking for Python on Computer","text":"<p>This section will ensure that Python is properly installed on your computer using the  terminal.</p> <ol> <li> <p>Check the Python version in the terminal by typing one of the two commands below:</p> <pre><code>python --version\n</code></pre> <p>or</p> <pre><code>python3 --version\n</code></pre> <p>a. If <code>python</code> does not work, then try <code>python3</code> instead.</p> <p>Success</p> <p>If Python is installed on your machine, then the terminal should display the version of Python that is installed, as shown in the image below.</p> <p></p> <p>Failure</p> <p>If running command resulted in an error message similar to the likes shown below, then Python is not installed on your machine.</p> <p></p> <p>If your machine does not have Python, then download any 3.x.x version of Python here. The Python installation wizard will guide you through the process.</p> </li> </ol>"},{"location":"Setting%20Up%20Your%20Project/#navigating-directories","title":"Navigating Directories","text":"<p>This section will focus on how to navigate file directories using the  terminal.</p> <ol> <li> <p>List out all directories you are currently in by typing the following:</p> <pre><code>dir\n</code></pre> <p>a. Afterwards, the terminal should look something like this. Your directories will be different.</p> <p></p> <p>b. A directory will be labeled as <code>&lt;DIR&gt;</code>.</p> </li> <li> <p>Choose a directory that you want to put your project folder into.</p> <p>a. For example, you can choose an existing directory like <code>Documents</code> shown in the previous step.</p> <p>Notes</p> <p>Practice good file management. Select a folder that will hold all your future projects and keep it organized.</p> </li> <li> <p>Navigate to the chosen directory by typing the following:</p> <pre><code>cd directory_name\n</code></pre> <p>a. <code>cd</code>, also known as <code>chdir</code>, is a command that changes your current working directory to another directory.</p> <p>b. <code>directory_name</code> is a placeholder name. You can replace it with any directory that is listed when you typed <code>dir</code> back in the first step here.</p> <p>Success</p> <p>Successfully navigating to a directory using the terminal command <code>cd</code> will looking something like this:</p> <p></p> </li> </ol>"},{"location":"Setting%20Up%20Your%20Project/#creating-project-folder","title":"Creating Project Folder","text":"<p>This section will focus on how to create a project folder using the  terminal.</p> <ol> <li> <p>Create the project folder by typing the following:</p> <pre><code>mkdir rock_paper_scissor\n</code></pre> <p>a. The project name <code>rock_paper_scissor</code> can be replaced with any name of your choice. This document will use the name <code>rock_paper_scissor</code> as the project name.</p> </li> <li> <p>Move into the newly created folder by typing the following:</p> <pre><code>cd rock_paper_scissor\n</code></pre> <p>a. Your terminal should look like this if you have created the <code>rock_paper_scissor</code> directory and navigated to it.</p> <p></p> <p>Failure</p> <p></p> <p>If you cannot find the path specified, then go back to the first step here.</p> </li> <li> <p>Create a Python file with the name <code>rock_paper_scissor</code> by typing the following:</p> <pre><code>notepad rock_paper_scissor.py\n</code></pre> <p>Warning</p> <p>If you have used your own project name, ensure that the name has the Python <code>.py</code> extension at the end. Excluding it will prevent the written code from running in Python.</p> </li> <li> <p>Click \"Yes\" when prompted to create a new file.</p> <p></p> </li> <li> <p>Check if the <code>rock_paper_scissor.py</code> file is in your current directory by typing the following:</p> <pre><code>dir\n</code></pre> <p>Success</p> <p>If you're successul, you will see the <code>rock_paper_scissor.py</code> file inside the <code>rock_paper_scissor</code> directory.</p> <p>It should not be labelled with <code>&lt;DIR&gt;</code> because it is a file.</p> <p></p> <p>Warning</p> <p>If you do not see the <code>rock_paper_scissor.py</code> file inside the <code>rock_paper_scissor</code> directory, then you must return here and follow the instructions again before proceeding with writing the code.</p> <p>Do not close the terminal. This guide will refer back to the terminal to activate other commands.</p> </li> </ol>"},{"location":"Setting%20Up%20Your%20Project/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have successfully completed the following using only the terminal:</p> <ul> <li> Opened the terminal.</li> <li> Navigated through file directories.</li> <li> Created a directory for a project.</li> <li> Populated a folder with a file.</li> </ul> <p>The next section will focus on coding the game itself. Please proceed to Writing Your First Game.</p>"},{"location":"Troubleshooting/","title":"Troubleshooting","text":"Issue Explanation Solution File/Directory not found Cannot find the file/directory with the terminal. Ensure that the name matches with the one you used to create the file/directory. Names are case-sensitive. Error running Python file Cannot run Python file with the terminal. Ensure that the file name has the extension <code>.py</code> to designate the file as a Python file. \"Syntax\" error Syntax error while running the Python file. Check the error message. Common errors include incorrect indentation, misspelled and misplaced Python keywords. \"Name\" Error Name error while running the Python file. Check the error message. Common errors include improper reference to variable and not importing modules. Error committing files Cannot commit the file to repository. Ensure that the file is staged, which readies the file to be committed to the repository. \"src refspec\" error src refspec error while uploading to GitHub GitHub repositories sometimes have different default branches. Check if the default branch is \"main\" or \"master\"."},{"location":"Uploading%20to%20GitHub/","title":"Uploading to GitHub","text":""},{"location":"Uploading%20to%20GitHub/#overview","title":"Overview","text":"<p>This section will focus uploading your code onto GitHub. It is platform that hosts git repositories onto the cloud, which allows developers to collaborate with each other.</p> <p>Warning</p> <p>Ensure that your terminal is in the <code>rock_paper_scissor</code> directory that you created previously in  Setting Up Your Project.</p> <p>Ensure that you have a GitHub account. If you do not have a GitHub account, click here and follow the steps to create an account.</p>"},{"location":"Uploading%20to%20GitHub/#initializing-local-git-repository","title":"Initializing Local Git Repository","text":"<p>This section focuses on creating a <code>.git</code> directory to allow for version control using the  terminal.</p> <ol> <li> <p>Create a <code>.git</code> directory in the terminal by typing the following:</p> <pre><code>git init\n</code></pre> <p>a. The <code>git init</code> command creates a new Git repository. It is the first step in implementing version control to your project.</p> <p>b. The <code>.git</code> directory is part of the version control system that allows developers to create and retrieve different versions of any project. This allows for version rollbacks if any major mistakes occur.</p> <p>Success</p> <p>Successfully creating a <code>.git</code> directory will look like this:</p> <p></p> <p>Notes</p> <p>Professional software developers will use some form of version control for work and for their personal projects.</p> <p>You will not be able to see the <code>.git</code> directory because it is hidden by default.</p> </li> </ol>"},{"location":"Uploading%20to%20GitHub/#adding-code-to-git","title":"Adding Code to Git","text":"<p>This section focuses on adding your newly created game into version control using the  terminal.</p> <ol> <li> <p>Stage file in the terminal by typing the following:</p> <pre><code>git add rock_paper_scissor.py\n</code></pre> <p>a. The <code>git add</code> command stages the file. Staging a file means that you have marked a modified file in its current version to go into the next commit.</p> </li> <li> <p>Commit file in the terminal by typing the following:</p> <pre><code>git commit -m \"I made my first game!\"\n</code></pre> <p>a. Commits can be thought of as snapshots or milestones along the timeline of a project. A <code>git commit</code> command captures a state of a project at that point in time.</p> <p>b. Everything in quotation marks after the <code>-m</code> option sets a message that tells other developers what changes you made for the current commit. You can replace the message with anything you like as long as it is wrapped in quotation marks.</p> <p>Success</p> <p>Successfully committing your code to your local .git directory will look like the following:</p> <p></p> <p>Failure</p> <p>If you forget to <code>git add</code> to stage a file after modifying it, then the following message will be shown:</p> <p></p> <p>Follow the instructions here to stage the file and then commit the file to fix this issue.</p> <p>Notes</p> <p>A good practice is to have clear and concise messages that tell other developers what you changed in your commit.</p> </li> </ol>"},{"location":"Uploading%20to%20GitHub/#creating-online-cloud-repository-on-github","title":"Creating Online Cloud Repository on GitHub","text":"<p>This section focuses on creating an online cloud repository in GitHub for you to upload your project to.</p> <ol> <li> <p>Login to GitHub and create a new repository as highlighted below:</p> <p></p> <p>a. Click on the \"+\" sign first</p> <p>b. Click on \"New repository\" next.</p> </li> <li> <p>Enter a repository name by typing the following:</p> <p></p> <p>a. If your project folder name is not <code>rock_paper_scissor</code>, enter the name you used instead.</p> </li> <li> <p>Create repository by clicking the following:</p> <p></p> <p>a. You may change the project visibility to private, so that only you and your project collaborators can view the project.</p> <p>b. All other settings can be left as default.</p> <p>Success</p> <p>Successfully creating the <code>rock_paper_scissor</code> repository will move you to the next page shown below:</p> <p></p> <p>This newly created cloud repository will host your project, and make it easy for you to access the project remotely.</p> </li> </ol>"},{"location":"Uploading%20to%20GitHub/#connecting-local-repository-to-cloud-repository","title":"Connecting Local Repository to Cloud Repository","text":"<p>This section focuses on connecting your local .git folder to the cloud GitHub repository using the  terminal.</p> <ol> <li> <p>Copy the new GitHub repository link:     </p> <p>a. Click on the \"copy\" button that is highlighted.</p> </li> <li> <p>Use the terminal to link your local repository to the cloud repository by typing the following:</p> <pre><code>git remote add origin https://github.com/your_github_username/rock_paper_scissor.git\n</code></pre> <p>a. The link after the word <code>origin</code> should be replaced with the link you copied into your clipboard in the previous step.</p> <p>b. In Git, \"origin\" is a shorthand name for the cloud repository that a project was originally cloned from.</p> <p>c. The <code>git remote add origin</code> command sets up a remote repository with the name \"origin\" at the address that follows.</p> <p>Notes</p> <p>You may CTRL + V to paste in the terminal. Some Windows version also allow right-clicking in the terminal to paste.</p> </li> <li> <p>Upload local repository to cloud repository by typing the following:</p> <pre><code>git push -u origin master\n</code></pre> <p>a. The option <code>-u</code> means to set <code>upstream</code>. It configures the local branch to track the remote branch.</p> <p>b. <code>master</code> is the default name given to the first branch present in a Git repository when it is initialized.</p> <p>c. Some users will have \"master\" as a default name, while some others will have \"main\" as a default name. If you encounter an error, try the other.</p> <p>Success</p> <p>Successfully uploading the local repository to the remote repository will look like the following:</p> <p></p> <p>Failure</p> <p>If you type another common branch name like <code>main</code>, then there is a chance that you will get a \"refspec\" error shown below:</p> <p></p> <p>If <code>main</code> does not work, try <code>master</code>. If <code>master</code> does not work, try <code>main</code>.</p> </li> <li> <p>Visit the GitHub repository to ensure changes have been made:</p> <p>Success</p> <p>Successfully uploading the project on to your GitHub repository should look like the following:</p> <p></p> <p>Notes</p> <p>You may have to refresh your <code>rock_paper_scissor</code> GitHub repository page to see your changes.</p> </li> </ol>"},{"location":"Uploading%20to%20GitHub/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have successfully completed the following tasks important to every developer:</p> <ul> <li> Initialized a local repository.</li> <li> Staged and committed files to a repository.</li> <li> Hosted an GitHub repository online.</li> <li> Connected a local repository to a cloud repository in GitHub.</li> </ul> <p>Congratulations! \ud83e\udd73\ud83c\udf89</p> <p>You have taken your first steps towards becoming a full-fledged developer.</p> <p>If you have encountered any problems throughout the tutorial, please proceed to Troubleshooting for solutions to common problems.</p> <p>If you need more explanation on some of the terms used in this document, please proceed to Glossary for definitions to the terms used in this document.</p>"},{"location":"Writing%20Your%20First%20Game/","title":"Writing Your First Game","text":""},{"location":"Writing%20Your%20First%20Game/#overview","title":"Overview","text":"<p>This section will focus on coding a simple game of rock paper scissor in Python.</p> <p>Note</p> <p>Variable names in code are case-sensitive. If you wish to use your own variable names, please ensure that they are consistent throughout the entire file.</p> <p>A common mistake that developers make is incorrectly typing a variable name, which could cause errors in the program.</p> <p>Warning</p> <p>You must have the <code>rock_paper_scissor.py</code> file opened in notepad before proceeding. You will be typing your code inside this file using notepad.</p> <p>Please read the typographical conventions here before continuing. Remember to press the \"enter/return\" key after typing the line(s) of code.</p>"},{"location":"Writing%20Your%20First%20Game/#preparing-game-variables","title":"Preparing Game Variables","text":"<p>This section will setup the variables that are needed for the game.</p> <ol> <li> <p>Import the <code>random</code> module by typing the following in your newly created <code>rock_paper_scissor.py</code> notepad file:</p> <pre><code>import random\n</code></pre> <p>a. This first line of code imports the <code>random</code> module, which possesses many functions for generating or manipulating random integers.</p> <p>b. The <code>import</code> keyword allows you to use modules in your code. This allows you to reuse code that you (or others) have created in any project.</p> <p>c. This program will be using the <code>random</code> module randomly generate the choices rock, paper, or scissor for the computer opponent.</p> </li> <li> <p>Initialize all options by typing the following:</p> <pre><code>options = (\"rock\", \"paper\", \"scissor\")\n</code></pre> <p>a. This line of code sets \"rock, paper, scissor\" as a tuple with the variable name <code>options</code>.</p> <p>b. A tuple is a collection of data. It is a data structure that cannot be modified. Tuples use parentheses to define their elements.</p> <p>c. Later, you will use the <code>random</code> module to access functions that randomly choose between rock, paper, and scissor.</p> </li> <li> <p>Get player choice by typing the following:</p> <pre><code>user_input = input(\"Rock, paper, or scissor? \").lower()\n</code></pre> <p>a. This line of code pauses the program, displays the prompt \"Rock, paper, or scissor?\", and waits for a player to type something into the program.</p> <p>b. <code>.lower()</code> is a command that returns the lowercase string from the given string.</p> <p>c. In this case, any string that the user inputs will always be lowercase. For example, \"rOcK\" will be \"rock\" when <code>.lower()</code> is used. This reduces the chance of user error by narrowing down the user input.</p> </li> <li> <p>Get computer choice by typing the following:</p> <pre><code>computer_choice = random.choice(options)\n</code></pre> <p>a. This line of code randomly selects \"rock\", \"paper\", or \"scissor\" from the tuple initialized back in step 2 of \"Prepare Game Variables\".</p> <p>b. The <code>choice()</code> method (from the <code>random</code> module) returns a randomly selected element from the specified sequence.</p> </li> <li> <p>Print out computer's choice by typing the following:</p> <pre><code>print(f\"Computer chooses {computer_choice}\")\n</code></pre> <p>a. This line of code lets the player know what the computer has chosen as its option.</p> <p>b. This line of code uses \"f-strings\", which is a concise and intuitive way to display variables in strings.</p> <p>c. <code>print()</code> is a function that outputs text or variables for the user to read. For example, <code>print(\"Hello World!\")</code> will output \"Hello World!\" for the user to read.</p> </li> </ol>"},{"location":"Writing%20Your%20First%20Game/#implementing-game-logic","title":"Implementing Game Logic","text":"<p>This section will focus on implementing the logic flow that determines who wins the rock, paper, scissor game.</p> <ol> <li> <p>Handle invalid choices by typing the following:</p> <pre><code>if user_input not in options:\n    print(\"Funny error message here.\")\n</code></pre> <p>a. This line of code checks if the user input is valid choice using the tuple initialized in step 2 of the previous section.</p> <p>b. The <code>if</code> keyword is a conditional statement used to execute a block of code only when a specific condition is met.</p> <p>c. <code>not</code> is a conditional statement that executes a block of code only when the given condition evaluates to false.</p> <p>d. <code>in</code> is an operator that checks whether a value exists in the given sequence.</p> <p>e. If neither \"rock\", \"paper\", nor \"scissor\" is typed in, then the program will print an error message.</p> <p>Notes</p> <p>It is good practice to let the user know what kind of error they incurred.</p> <p>For example, the error message should let the user know that they should be typing in \"rock\", \"paper\", or \"scissor\" into the program.</p> <p>Warning</p> <p>Python uses indentation/white space as a way to interpret which group of statements belong to a particular block of code.</p> <p>Press the \"tab\" key to properly indent your code. You may also press the \"space\" key four times to mimic one \"tab\" press.</p> </li> <li> <p>Handle ties by typing the following:</p> <pre><code>elif user_input == computer_choice:\n    print(\"Tie!\")\n</code></pre> <p>a. The <code>==</code> operator compares the value or equality between two objects.</p> <p>b. This line of code checks if the user input is the same as the computer's choice. If it is the same, then the program will print \"Tie!\".</p> <p>c. The <code>elif</code> keyword, also known as \"if-else\", follows after an <code>if</code> keyword. It functions the same as an <code>if</code> statement.</p> </li> <li> <p>Handle user choice of rock by typing the following:</p> <pre><code>elif user_input == options[0] and computer_choice == options[2]:\n    print(\"You Win!\")\n</code></pre> <p>a. This line of code compares the player's \"rock\" choice to the computer's \"scissor\" choice, which will result in the player winning.</p> <p>b. [0] is the first element of the <code>options</code> tuple, so <code>options[0]</code> is \"rock\".</p> <p>c. [2] is the third element of the <code>options</code> tuple, so <code>options[2]</code> is \"scissor\".</p> <p>Notes</p> <p>In programming, many data structures start counting at 0 instead of 1.</p> </li> <li> <p>Handle user choice of paper by typing the following:</p> <pre><code>elif user_input == options[1] and computer_choice == options[0]:\n    print(\"You Win!\")\n</code></pre> <p>a. This line of code compares the player's \"paper\" choice to the computer's \"rock\" choice, which will result in the player winning.</p> <p>b. [1] is the second element of the <code>options</code> tuple, so <code>options[1]</code> is \"paper\".</p> <p>c. [0] is the first element of the <code>options</code> tuple, so <code>options[0]</code> is \"rock\".</p> </li> <li> <p>Handle user choice of scissor by typing the following:</p> <pre><code>elif user_input == options[2] and computer_choice == options[1]:\n    print(\"You Win!\")\n</code></pre> <p>a. This line of code compares the player's \"scissor\" choice to the computer's \"paper\" choice, which will result in the player winning.</p> <p>b. [2] is the third element of the <code>options</code> tuple, so <code>options[2]</code> is \"scissor\".</p> <p>c. [1] is the second element of the <code>options</code> tuple, so <code>options[1]</code> is \"paper\".</p> </li> <li> <p>Handle lose scenario by typing the following:</p> <pre><code>else:\n    print(\"You Lose!\")\n</code></pre> <p>a. This line of code runs when none of the above requirements are met. This means that the player loses by default if the player does not meet any of the above requirements.</p> <p>c. The <code>else</code> keyword executes if the \"if-else\" code block all evaluate to <code>False</code>.</p> </li> </ol>"},{"location":"Writing%20Your%20First%20Game/#finalizing-the-code","title":"Finalizing the Code","text":"<p>If you have followed the instructions correctly, then your Python file should look similar to the following:</p> <pre><code>import random\n\noptions = (\"rock\", \"paper\", \"scissor\")\nuser_input = input(\"Rock, paper, scissor? \").lower()\ncomputer_choice = random.choice(options)\nprint(f\"Computer chooses {computer_choice}\")\n\nif user_input not in options:\n    print(\"Funny error message here.\")\nelif user_input == computer_choice:\n    print(\"Tie!\")\nelif user_input == options[0] and computer_choice == options[2]:\n    print(\"You Win!\")\nelif user_input == options[1] and computer_choice == options[0]:\n    print(\"You Win!\")\nelif user_input == options[2] and computer_choice == options[1]:\n    print(\"You Win!\")\nelse:\n    print(\"You Lose!\")\n</code></pre> <p>Notes</p> <p>You may add white space between blocks of code to help with code readability.</p> <p>For the example above, module imports, variable initializations, and the if-else code blocks were separated by a single line to make them easier to read and distinguish.</p>"},{"location":"Writing%20Your%20First%20Game/#running-the-game","title":"Running the Game","text":"<p>This section will focus on running your game using the  terminal.</p> <ol> <li> <p>Save the code by clicking the \"File\" menu in the top left of notepad, and then clicking on \"Save\" as shown below:     </p> <p>Notes</p> <p>You may also save the file by using the CTRL + S save shortcut on your keyboard.</p> </li> <li> <p>Return to the terminal from the previous  Setting Up Your Project section.</p> <p>Warning</p> <p>Ensure that you are in the <code>rock_paper_scissor</code> directory.</p> <p>If you did not close the terminal from the previous section, you should still be in the <code>rock_paper_scissor</code> directory.</p> <p>If you closed the terminal, refer back to \"Setting Up Your Project\" under the \"Navigating Directories\" section here.</p> </li> <li> <p>Run the program in the <code>rock_paper_scissor</code> directory by typing in one of the following two commands in the terminal:</p> <pre><code>python rock_paper_scissor.py\n</code></pre> <p>or</p> <pre><code>python3 rock_paper_scissor.py\n</code></pre> </li> <li> <p>Enjoy your game!</p> <p>Success</p> <p>If everything is correct, the terminal should look like the image below:</p> <p></p> <p>Failure</p> <p>If there is a syntax error, then check which line can be found. For example, the picture below shows that the error is in line 17, and the error itself is around the <code>else</code> keyword. The error can be caused by a lack of indentation, which can lead to statements belonging to the wrong block of code.</p> <p></p> <p>Failure</p> <p>If there is a name error and <code>random</code> is not defined, then it is an import error. Add <code>import random</code> as the first line of code to fix this issue.</p> <p></p> <p>Warning</p> <p>If your code does not run, please compare your code in the finalized code section.</p> </li> </ol>"},{"location":"Writing%20Your%20First%20Game/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have successfully implemented the following concepts in Python:</p> <ul> <li> Imported a Python module.</li> <li> Created a command to get user input.</li> <li> Generated random values.</li> <li> Created a logic flow for a game.</li> </ul> <p>The next section will focus on uploading your project onto GitHub. Please proceed to Uploading to GitHub.</p>"},{"location":"glossary/","title":"Glossary","text":"Term Definition Python A high-level programming language that favours human readability. High-level Programming Language A highly abstracted language designed to simplify computer programming. Operating System System software that allows computers to function, most common software includes Windows, Mac, or Linux. Terminal An interface to enter data to communicate with computers. Command Prompt The terminal for Windows machines. Directory A folder on your computer. Project A collection of files that create a working piece of software. Module A file that contains code to perform a specific task. Import The act of making one Python module available to another. Initialize The assignment of assigning data to a variable. Variable A storage location for data that can be referenced by some sort of symbol. Function A block of code that performs a specific task. Method A function that is associated with an object or a class. Object A collection of data (variables) and methods (functions). Class A blueprint for creating objects. Operator A character that represents a logical or mathematical operation, such as + or -. Syntax The rules that define a valid structure for code. Data Structure A specialized format for organizing, processing, retrieving, and storing data. Tuple A data structure for storing an immutable collection of data. Immutable Anything that cannot be changed. Element The individual data found inside any collection of data. String A sequence of characters. F-Strings A string that allows for insertion of custom variables in an easily formattable way. GitHub An online developer platform that allows developers to upload their work onto cloud. Version Control The practice of tracking and managing changes in code for projects. Version Rollback The act of reverting any changes to its previous version. Git A software that allows for version control. Local Anything on your computer that can be accessed offline without the internet. Cloud Online services that remotely hosts some functionality, such as data storage. Repository A centralized digital storage that developers use to make and manage changes to a project's code. Branch A new/separate version of the main repository Staging The act of marking a file to be added into version control. Commit The actual act of adding to version control. Commit Message A short message that describes what changes were made to the current version of a project. Push The act of uploading local files onto cloud."}]}